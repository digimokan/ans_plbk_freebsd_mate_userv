- hosts: localhost
  connection: local
  vars_files:
    - host_vars/vault_clear.yml
    - host_vars/vault_enc.yml
  vars:
    machine_hostname: 'userv.machine'
    admin_user_and_group_name: "admin"
    sudo_users_group_name: "wheel"
    root_user_group_name: "wheel"
    zfs_pool: "zroot"
    # Note: temporarily set these user_password vars on first playbook run
    admin_user_password_for_login: ''
    wkst_user_password_for_login: ''
    wkst_user_password_for_zfs_homedir_dataset: ''
    wkst_user_password_for_bitwarden: ''
    admin_user_home_dir: "/home/{{ admin_user_and_group_name }}"
    wkst_user_home_dir: "/home/{{ vault_clear_wkst_user_and_group_name }}"
  tasks:
    - name: "Configure the machine's hostname"
      ansible.builtin.include_role:
        name: ans_role_config_hostname
      vars:
        cfg_hostname_hostname: "{{ machine_hostname }}"
    - name: "Configure system clock, time, and time zone"
      ansible.builtin.include_role:
        name: ext/ans_role_config_time
    - name: "Configure OS security hardening options"
      ansible.builtin.include_role:
        name: ans_role_config_security_hardening
    - name: "Configure system and package upgrades"
      ansible.builtin.include_role:
        name: ext/ans_role_config_upgrades
    - name: "Configure the FreeBSD 'loader' bootloader"
      ansible.builtin.include_role:
        name: ext/ans_role_config_loader
      vars:
        load_cpu_microcode_updates: true
    - name: "Install and configure the OSS sound driver layer"
      ansible.builtin.include_role:
        name: ext/ans_role_config_oss
      vars:
        oss_sound_card_type: 'intel'
        oss_force_set_sound_output_pcm_at_boot: '0'
        oss_intel_nid_disable_list:
          - { card: '0', nid: '30', descrip: 'rear speaker/optical combo jack optical-out-channel' }
          - { card: '0', nid: '33', descrip: 'front headphones jack out-channel' }
          - { card: '1', nid: '3', descrip: 'rear HDMI jack audio-out-channel' }
    - name: "Install and configure video card drivers"
      ansible.builtin.include_role:
        name: ext/ans_role_config_video_drivers
        public: true
      vars:
        cfg_video_card_make: "Intel"
        cfg_video_card_series: "HD"
    - name: "Configure webcam support"
      ansible.builtin.include_role:
        name: ans_role_config_webcam
        public: true
    - name: "Install and configure the FreeBSD Linux Binary-Compat Layer"
      ansible.builtin.include_role:
        name: ans_role_config_freebsd_linux_compat
        public: true
    - name: "Add and configure sudo-users group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_group
      vars:
        cfg_group_name: "{{ sudo_users_group_name }}"
        cfg_group_is_system_group: true
    - name: "Add and configure admin group '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_group
      vars:
        cfg_group_name: "{{ admin_user_and_group_name }}"
    - name: "Add and configure user group '{{ vault_clear_wkst_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_group
      vars:
        cfg_group_name: "{{ vault_clear_wkst_user_and_group_name }}"
    - name: "Install and configure the python passlib password-hashing module"
      ansible.builtin.include_role:
        name: ans_role_config_passlib
        public: true
    - name: "Add and configure admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_user
      vars:
        cfg_user_name: "{{ admin_user_and_group_name }}"
        cfg_user_password: "{{ admin_user_password_for_login }}"
        cfg_user_primary_group: "{{ admin_user_and_group_name }}"
        cfg_user_groups:
          - "{{ sudo_users_group_name }}"
        cfg_user_create_home_dir_in_existing_filesystem: false
        cfg_user_path_to_home_dir: "{{ admin_user_home_dir }}"
        cfg_user_comment: "{{ admin_user_and_group_name }}"
        cfg_user_password_hash_type: "{{ passlib_password_hash_type }}"
        cfg_user_password_salt: "{{ passlib_password_constant_salt }}"
    - name: "Add and configure workstation user '{{ vault_clear_wkst_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_user
      vars:
        cfg_user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        cfg_user_password: "{{ wkst_user_password_for_login }}"
        cfg_user_primary_group: "{{ vault_clear_wkst_user_and_group_name }}"
        cfg_user_groups:
          - "{{ cfg_video_group_name }}"
          - "{{ webcam_group_name }}"
        cfg_user_create_home_dir_in_existing_filesystem: false
        cfg_user_path_to_home_dir: "{{ wkst_user_home_dir }}"
        cfg_user_comment: "{{ vault_clear_wkst_user_and_group_name }}"
        cfg_user_password_hash_type: "{{ passlib_password_hash_type }}"
        cfg_user_password_salt: "{{ passlib_password_constant_salt }}"
    - name: "Install and configure the lsblk block-device info utility"
      ansible.builtin.include_role:
        name: ans_role_config_lsblk
        public: true
    - name: "Install and configure ZFS hardware: disks, pools, vdevs, and devices"
      ansible.builtin.include_role:
        name: ans_role_config_zfs_hw
    - name: "Create and configure zfs filesystem datasets"
      ansible.builtin.include_role:
        name: ans_role_config_zfs_datasets
      vars:
        zfs_datasets_to_create:
          - { pool: "{{ zpl }}", path: "{{ adir }}", owner: "{{ ausg }}", group: "{{ ausg }}", mode: '710', enc: '' }
          - { pool: "{{ zpl }}", path: "{{ wdir }}", owner: "{{ wusg }}", group: "{{ wusg }}", mode: '710', enc: "{{ wpswd }}" }
        zpl: "{{ zfs_pool }}"
        adir: "{{ admin_user_home_dir }}"
        wdir: "{{ wkst_user_home_dir }}"
        wpswd: "{{ wkst_user_password_for_zfs_homedir_dataset }}"
        ausg: "{{ admin_user_and_group_name }}"
        wusg: "{{ vault_clear_wkst_user_and_group_name }}"
    - name: "Configure sudo settings for auth group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
      vars:
        ask_password_timeout: 45
        password_prompt_timeout_minutes: 0
        use_root_umask: true
        set_auth_for_group: "{{ sudo_users_group_name }}"
    - name: "Clone playbook used to set up the machine, and emplace vault password"
      ansible.builtin.include_role:
        name: ans_role_config_user_playbook
      vars:
        cfg_user_playbook_pb_name: "{{ playbook_dir | basename }}"
        cfg_user_playbook_target_user_name: "{{ admin_user_and_group_name }}"
        cfg_user_playbook_target_group_name: "{{ admin_user_and_group_name }}"
        cfg_user_playbook_target_vault_passwd_symlink_to_path: '{{ wkst_user_home_dir }}/admin_vault_password.txt'
    - name: "Install and configure the jq command-line json parser"
      ansible.builtin.include_role:
        name: ans_role_config_jq
        public: true
    - name: "Install and configure the xsel clipboard provider"
      ansible.builtin.include_role:
        name: ans_role_config_xsel
        public: true
    - name: "Install and configure the fzf command-line fuzzy finder"
      ansible.builtin.include_role:
        name: ans_role_config_fzf
        public: true
    - name: "Install and configure the Bitwarden CLI password manager utility"
      ansible.builtin.include_role:
        name: ans_role_config_bitwarden_cli
        public: true
      vars:
        bitwarden_user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        bitwarden_master_password: "{{ wkst_user_password_for_bitwarden }}"
        bitwarden_check_freebsd_linux_compat_cmd: "{{ freebsd_linux_compat_check_cmd }}"
        bitwarden_cli_api_key_client_id: "{{ vault_clear_bitwarden_api_key_client_id }}"
        bitwarden_cli_api_key_client_secret: "{{ vault_clear_bitwarden_api_key_client_secret }}"
        bitwarden_cli_exec_jq_cmd: "{{ jq_main_cmd }}"
        bitwarden_cli_exec_xsel_cmd: "{{ xsel_main_cmd }}"
        bitwarden_cli_exec_fzf_cmd: "{{ fzf_main_cmd }}"
    - name: "Create and configure XDG user dirs for '{{ vault_clear_wkst_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_xdg_user_dirs
      vars:
        user_name: "{{ vault_clear_wkst_user_and_group_name }}"
    - name: "Install and configure the sndio sound driver layer"
      ansible.builtin.include_role:
        name: ans_role_config_sndio
    - name: "Install and configure the automount device-mounting utility"
      ansible.builtin.include_role:
        name: ext/ans_role_config_automount
    - name: "Install and configure the LibreOffice office application suite"
      ansible.builtin.include_role:
        name: ans_role_config_libreoffice
    - name: "Install and configure the VLC video player"
      ansible.builtin.include_role:
        name: ans_role_config_vlc
      vars:
        enable_dvd_support: true
    - name: "Define list of browser search providers"
      ansible.builtin.include_role:
        name: ext/ans_vars_browser_search_providers
        public: true
    - name: "Install and configure the Firefox browser"
      ansible.builtin.include_role:
        name: ans_role_config_firefox
      vars:
        firefox_user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        firefox_home_page: 'https://www.google.com'
        firefox_install_google_widevine_drm_addon: true
        firefox_install_bitwarden_ext: true
        firefox_install_user_agent_switcher_ext: true
        firefox_search_providers: "{{ browser_search_providers }}"
    - name: "Install and configure the Chromium browser"
      ansible.builtin.include_role:
        name: ans_role_config_chromium
      vars:
        chromium_user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        chromium_home_page: 'https://www.gmail.com'
        chromium_show_home_button: true
        chromium_install_bitwarden_ext: true
        chromium_install_user_agent_switcher_ext: true
        chromium_search_providers: "{{ browser_search_providers }}"
    - name: "Install and configure Avahi"
      ansible.builtin.include_role:
        name: ans_role_config_avahi
        public: true
      vars:
        enable_host_discovery_service: true
    - name: "Configure automatic printer discovery and driverless printing"
      ansible.builtin.include_role:
        name: ans_role_config_automatic_printing
      vars:
        notify_avahi_handler_on_auto_printing_change: "{{ handler_to_restart_avahi_services }}"
    - name: "Configure automatic scanner discovery and driverless scanning"
      ansible.builtin.include_role:
        name: ans_role_config_automatic_scanning
      vars:
        notify_avahi_handler_on_auto_printing_change: "{{ handler_to_restart_avahi_services }}"
    - name: "Install and configure the Simple-Scan scanning application"
      ansible.builtin.include_role:
        name: ans_role_config_simple_scan
    - name: "Install and configure the OBS video-recording application"
      ansible.builtin.include_role:
        name: ans_role_config_obs
    - name: "Install the restic backup program, and configure backups to a remote repo"
      ansible.builtin.include_role:
        name: ans_role_config_restic
      vars:
        restic_user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        restic_s3_bucket_url: "{{ vault_clear_restic_s3_bucket_url }}"
        restic_s3_bucket_key_id: "{{ vault_clear_restic_s3_bucket_key_id }}"
        restic_s3_bucket_secret_keystring: "{{ vault_clear_restic_s3_bucket_secret_keystring }}"
        restic_default_pass_cmd: >-
          {{ bitwarden_cli_utility_script_main_cmd }}
          --print-entry={{ 'Wasabi (User V)' | quote }}
          --custom-field={{ 'AMAZON_S3_BUCKET_REPO_KEYSTRING' | quote }}
          --no-interactive-search
        restic_automatic_daily_backup_dirs:
          - "/home/{{ vault_clear_wkst_user_and_group_name }}/Documents/"
        restic_user_guide_dir: "/home/{{ vault_clear_wkst_user_and_group_name }}/"
    - name: "Set up fish shell for admin user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_fish
        public: true
      vars:
        fish_user_name: "{{ admin_user_and_group_name }}"
    - name: "Install and configure the MATE desktop environment"
      ansible.builtin.include_role:
        name: ext/ans_role_config_mate_de
      vars:
        user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        enable_sound_support: true
        enable_printing_support: true
        terminal_shell: "{{ fish_main_cmd }}"
        terminal_window_height: "48"
        terminal_window_width: "192"
        font_for_window_titles: "Sans 20"
        font_for_desktop_background: "Sans 18"
        font_for_apps: "Sans 18"
        font_for_docs: "Sans 16"
        font_for_monospace: "Monospace 16"
    - name: "Install and configure the LightDM display manager"
      ansible.builtin.include_role:
        name: ext/ans_role_config_lightdm_dm
      vars:
        default_user_name: "{{ vault_clear_wkst_user_and_group_name }}"
        hide_users_list: [ "{{ admin_user_and_group_name }}" ]
        session: "mate"
        login_screen_image_path: "/usr/local/share/backgrounds/mate/desktop/Ubuntu-Mate-Cold-no-logo.png"
    - name: "Install a standard set of system font packages"
      ansible.builtin.include_role:
        name: ext/ans_role_config_fonts
      vars:
        install_ms_legacy_fonts: true
        install_ms_vista_fonts: true
    - name: "Set env vars, login actions, and logout actions for workstation user '{{ vault_clear_wkst_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ans_role_config_shell
      vars:
        user_name: "{{ vault_clear_wkst_user_and_group_name }}"

